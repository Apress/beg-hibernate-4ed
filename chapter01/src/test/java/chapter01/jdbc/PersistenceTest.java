package chapter01.jdbc;

import chapter01.hibernate.Message;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static org.testng.Assert.assertEquals;

public class PersistenceTest {
    @BeforeSuite
    public void setup() {
        //Class.forName("org.h2.Driver");

        try (Connection connection = DriverManager.getConnection("jdbc:h2:./db1", "sa", "")) {
            // clear out the old data, if any, so we know the state of the DB
            try (PreparedStatement ps = connection.prepareStatement("DROP TABLE messages IF EXISTS")) {
                ps.execute();
            }
            // create the table...
            try (PreparedStatement ps = connection.prepareStatement(
                    "CREATE TABLE messages ("
                            + "id BIGINT GENERATED BY DEFAULT AS IDENTITY "
                            + "PRIMARY KEY, "
                            + "text VARCHAR(256))"
            )) {
                ps.execute();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    @Test
    public void saveMessage() {
        try (Connection connection = DriverManager.getConnection("jdbc:h2:./db1", "sa", "")) {

            connection.setAutoCommit(false);
            try (PreparedStatement ps = connection.prepareStatement("INSERT INTO messages(text) VALUES (?)")) {

                ps.setString(1, "Hello, World");
                ps.execute();
            }
            connection.commit();
            // eagerly free resources
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    @Test(dependsOnMethods = "saveMessage")
    public void readMessage() {
        final String SELECT = "SELECT id, text FROM messages";
        final String JDBCURL = "jdbc:h2:./db1";
        List<Message> list = new ArrayList<>();
        try (Connection connection = DriverManager.getConnection(JDBCURL, "sa", "")) {
            try (PreparedStatement ps = connection.prepareStatement(SELECT)) {
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        Message message = new Message();
                        message.setId(rs.getLong(1));
                        message.setText(rs.getString(2));
                        list.add(message);
                    }

                    assertEquals(list.size(), 1);
                    for (Message m : list) {
                        System.out.println(m);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
}
